#use PlotScatter to to plot the analyses
PlotScatter(fold_change)
#use PlotScatter to to plot the analyses
PlotScatter(fold_change,xlim=c(-2,2),ylim=c(-2,2))
#This works since there are only two analysis values overall that are stored in the object:
Analyses(fold_change,description = TRUE)
# differential gene expression using DESeq2
fold_change_Deseq <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change_Deseq
Analyses(fold_change_Deseq,description = TRUE)
# differential gene expression using DESeq2
fold_change <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change
Analyses(fold_change,description = TRUE)
#differential analysis using the lfc package [3] and DESeq2:
fold_change <-  LFC(NVP_OSMI_meta, name.prefix = "QC",contrasts=contrasts)
fold_change
#This works since there are three analysis values overall that are stored in the object:
Analyses(fold_change,description = TRUE)
# differential gene expression using DESeq2
fold_change <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change
Analyses(fold_change,description = TRUE)
VulcanoPlot(fold_change,analysis = "QC.4sU effect",lfc.cutoff = 0.5,ylim=c(-9,50))
VulcanoPlot(fold_change,analysis = "QC.Control vs NVP2",lfc.cutoff = 0.5,ylim=c(-9,50))
VulcanoPlot(fold_change,analysis = "QC.Control vs NVP2",lfc.cutoff = 0.5)
VulcanoPlot(fold_change,analysis = "QC.Control vs NVP2")
#differential analysis using the lfc package [3] and DESeq2:
fold_change <-  LFC(NVP_OSMI_meta, name.prefix = "QC",contrasts=contrasts)
fold_change
VulcanoPlot(fold_change,analysis = "QC.Control vs NVP2")
# differential gene expression using DESeq2
fold_change <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change
Analyses(fold_change,description = TRUE)
#This works since there are three analysis values overall that are stored in the object:
Analyses(fold_change,description = TRUE)
#differential analysis using the lfc package [3] and DESeq2:
fold_change <-  LFC(NVP_OSMI_meta, name.prefix = "QC",contrasts=contrasts)
fold_change
#This works since there are three analysis values overall that are stored in the object:
Analyses(fold_change,description = TRUE)
# differential gene expression using DESeq2
fold_change <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change
Analyses(fold_change,description = TRUE)
MAPlot(fold_change,analysis = "QC.Control vs NVP2",lfc.cutoff = 1)
MAPlot(fold_change_cal,analysis = "QC.Control vs NVP2",lfc.cutoff = 1)
#differential analysis using the lfc package [3] and DESeq2:
fold_change_cal <-  LFC(NVP_OSMI_meta, name.prefix = "QC",contrasts=contrasts)
fold_change_cal
#use PlotScatter to to plot the analyses
PlotScatter(fold_change_cal,xlim=c(-2,2),ylim=c(-2,2))
#This works since there are three analysis values overall that are stored in the object:
Analyses(fold_change_cal,description = TRUE)
# differential gene expression using DESeq2
fold_change_cal <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change_cal
Analyses(fold_change_cal,description = TRUE)
VulcanoPlot(fold_change_cal,analysis = "QC.Control vs NVP2")
MAPlot(fold_change_cal,analysis = "QC.Control vs NVP2",lfc.cutoff = 1)
head(GetTable(NVP_OSMI_meta))
#You can change the slot by specifying another type parameter:
head(GetTable(sars,type="count"))
#You can use multiple slots (we only show the column names instead of the head of the returned table):
colnames(GetTable(sars,type=c("norm","count")))
#You can use multiple slots (we only show the column names instead of the head of the returned table):
colnames(GetTable(NVP_OSMI_meta,type=c("norm","count")))
GetData(NVP_OSMI_meta,genes="MYC")
head(GetTable(NVP_OSMI_meta,"QC.Control vs NVP2"))
head(GetTable(fold_change_cal,"QC.Control vs NVP2"))
head(GetAnalysisTable(fold_change_cal,"QC.Control vs NVP2"))
fold_change_cal
Analyses(fold_change_cal,description = TRUE)
PlotScatter(banp,x=`QC.Control vs NVP2`,y=-log10(`QC.Control vs OSMI`))
PlotScatter(fold_change_cal,x=`QC.Control vs NVP2`,y=-log10(`QC.Control vs OSMI`))
PlotScatter(fold_change_cal,x=`QC.Control vs NVP2.LFC`,y=-log10(`QC.Control vs OSMI`))
#differential analysis using the lfc package [3] and DESeq2:
fold_change_LCF <-  LFC(NVP_OSMI_meta, name.prefix = "QC",contrasts=contrasts)
fold_change_LCF
#use PlotScatter to to plot the analyses
PlotScatter(fold_change_LCF,xlim=c(-2,2),ylim=c(-2,2))
#This works since there are three analysis values overall that are stored in the object:
Analyses((fold_change_LCF,description = TRUE)
#This works since there are three analysis values overall that are stored in the object:
Analyses(fold_change_LCF,description = TRUE)
# differential gene expression using DESeq2
fold_change_cal <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change_cal
# differential gene expression using DESeq2
fold_change_LCF <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change_LCF
Analyses(fold_change_LCF,description = TRUE)
PlotScatter(fold_change_cal,x=`QC.Control vs NVP2.LFC`,y=-log10(`QC.Control vs OSMI`))
PlotScatter(fold_change_LCF,x=`QC.Control vs NVP2.LFC`,y=-log10(`QC.Control vs OSMI`))
PlotScatter(fold_change_LCF,x=`QC.Control vs NVP2.LFC`,y=-log10(`QC.Control vs NVP2.Q`))
# differential gene expression using DESeq2
fold_change_LCF <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "QC",contrasts=contrasts)
fold_change_LCF
#This works since there are three analysis values overall that are stored in the object:
Analyses(fold_change_LCF,description = TRUE)
MAPlot(banp,analysis = "QC.Control vs NVP2")|
MAPlot(banp,analysis = "QC.Control vs OSMI")
MAPlot(fold_change_LCF,analysis = "QC.Control vs NVP2")|
MAPlot(fold_change_LCF,analysis = "QC.Control vs OSMI")
banp <- LFC(NVP_OSMI_meta,name.prefix = "total",contrasts = contrasts)
banp <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "total",contrasts = contrasts)
banp <- LFC(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
banp <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
banp
MAPlot(banp,analysis = "new.Control vs NVP2")|
MAPlot(banp,analysis = "new.Control vs OSMI")
Analyses(banp, description = TRUE)
banp_new <- LFC(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
banp_new <- PairwiseDESeq2(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
Analyses(banp_new, description = TRUE)
genes <- GetSignificantGenes(banp_new,analysis = "new.Control vs NVP2", criteria = Q<0.05 & LFC< -1)
genes <- GetSignificantGenes(banp_new,analysis = "new.Control vs NVP2")
banp <- LFC(NVP_OSMI_meta,name.prefix = "total",contrasts = contrasts)
banp <- PairwiseDESeq2(banp,name.prefix = "total",contrasts = contrasts)
banp
Analyses(banp, description = TRUE)
genes <- GetSignificantGenes(banp_new,analysis = "new.Control vs NVP2")
banp_new <- LFC(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
banp_new <- PairwiseDESeq2(banp_new,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
Analyses(banp_new, description = TRUE)
MAPlot(banp_new,analysis = "new.Control vs NVP2")|
MAPlot(banp_new,analysis = "new.Control vs OSMI")
#differential analysis using the lfc package [3] and DESeq2:
fold_change_LCF <-  LFC(NVP_OSMI_meta, name.prefix = "QC",contrasts=contrasts)
fold_change_LCF
#use PlotScatter to to plot the analyses
PlotScatter(fold_change_LCF,xlim=c(-2,2),ylim=c(-2,2))
#This works since there are three analysis values overall that are stored in the object:
Analyses(fold_change_LCF,description = TRUE)
# differential gene expression using DESeq2
fold_change_LCF <- PairwiseDESeq2(fold_change_LCF,name.prefix = "QC",contrasts=contrasts)
fold_change_LCF
Analyses(fold_change_LCF,description = TRUE)
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2")
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2")|
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs OSMI")|
#Without any other parameters GetTable returns data for all genes from the default slot:
head(GetTable(NVP_OSMI_meta))
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2")|
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs OSMI")
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2", lfc.cutoff = 0.5,ylim=c(-9,50))|
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs OSMI", lfc.cutoff = 0.5,ylim=c(-9,50))
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2", lfc.cutoff = 0.5,ylim=c(-9,30))|
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs OSMI", lfc.cutoff = 0.5,ylim=c(-9,30))
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2", lfc.cutoff = 0.5,ylim=c(-9,30), xlim=c(-6,6))|
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs OSMI", lfc.cutoff = 0.5,ylim=c(-9,30), xlim=c(-6,6))
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2", lfc.cutoff = 0.5,ylim=c(0,30), xlim=c(-6,6))|
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs OSMI", lfc.cutoff = 0.5,ylim=c(0,30), xlim=c(-6,6))
banp_new <- LFC(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
banp_new <- PairwiseDESeq2(banp_new,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
MAPlot(banp_new,analysis = "new.Control vs NVP2")|
MAPlot(banp_new,analysis = "new.Control vs OSMI")
VulcanoPlot(banp_new,analysis = "QC.Control vs NVP2", lfc.cutoff = 0.5,ylim=c(0,30), xlim=c(-6,6))|
VulcanoPlot(banp_new,analysis = "QC.Control vs OSMI", lfc.cutoff = 0.5,ylim=c(0,30), xlim=c(-6,6))
VulcanoPlot(banp_new,analysis = "new.Control vs NVP2", lfc.cutoff = 0.5,ylim=c(0,30), xlim=c(-6,6))|
VulcanoPlot(banp_new,analysis = "new.Control vs OSMI", lfc.cutoff = 0.5,ylim=c(0,30), xlim=c(-6,6))
VulcanoPlot(banp_new,analysis = "new.Control vs NVP2", lfc.cutoff = 0.5)|
VulcanoPlot(banp_new,analysis = "new.Control vs OSMI", lfc.cutoff = 0.5)
Analyses(banp_new, description = TRUE)
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs NVP2", lfc.cutoff = 1,ylim=c(0,30), xlim=c(-6,6))|
VulcanoPlot(fold_change_LCF,analysis = "QC.Control vs OSMI", lfc.cutoff = 1,ylim=c(0,30), xlim=c(-6,6))
# Select (with mouse or arrow keys) the install.packages("...") and
# run it (by Ctrl+Enter / Cmd+Enter):
# install.packages("GGally")
# Pre-exercise-code (Run this code chunk first! Do NOT edit it.)
# Click the green arrow ("Run Current Chunk") in the upper-right corner of this chunk. This will initialize the R objects needed in the exercise. Then move to Instructions of the exercise to start working.
# (No pre-exercise code in this exercise! Just go on!)
# This is a code chunk in RStudio editor.
# Work with the exercise in this chunk, step-by-step. Fix the R code!
# read the data into memory
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
# Look at the dimensions of the data
# Look at the structure of the data
lrn14
head(lrn14)
# This is a code chunk in RStudio editor.
# Work with the exercise in this chunk, step-by-step. Fix the R code!
#lrn14 is available
# divide each number in a vector
c(1,2,3,4,5) / 2
# print the "Attitude" column vector of the lrn14 data
lrn14$Attitude
# divide each number in the column vector
lrn14$Attitude / 10
# create column 'attitude' by scaling the column "Attitude"
lrn14$attitude <- "change me!"
# print the "Attitude" column vector of the lrn14 data
lrn14$Attitude
# This is a code chunk in RStudio editor.
# Work with the exercise in this chunk, step-by-step. Fix the R code!
#lrn14 is available
# divide each number in a vector
c(1,2,3,4,5) / 2
# print the "Attitude" column vector of the lrn14 data
lrn14$Attitude
# divide each number in the column vector
lrn14$Attitude / 10
# create column 'attitude' by scaling the column "Attitude"
lrn14$attitude <- Attitude
# create column 'attitude' by scaling the column "Attitude"
lrn14$attitude <- attitude
# create column 'attitude' by scaling the column "Attitude"
lrn14$attitude <- lrn14$Attitude / 10
# Pre-exercise-code (Run this code chunk first! Do NOT edit it.)
# Click the green arrow ("Run Current Chunk") in the upper-right corner of this chunk. This will initialize the R objects needed in the exercise. Then move to Instructions of the exercise to start working.
# read the data into memory
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
lrn14$attitude <- lrn14$Attitude / 10
# Access the dplyr library
library(dplyr)
# questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# select the columns related to deep learning
deep_columns <- select(lrn14, one_of(deep_questions))
# and create column 'deep' by averaging
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning
surface_columns <- select(lrn14, one_of(surface_questions))
# and create column 'surf' by averaging
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning
strategic_columns <- select(lrn14, one_of(strategic_questions))
# and create column 'stra' by averaging
lrn14$stra <- rowMeans(strategic_columns)
# read the data into memory
lrn14 <- read.table(" http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
# read the data into memory
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
# read the data into memory
data_test <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
summary(data_test)
dim(data_test)
colnames(data_test)
str(data_test)
# questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
age_questions <- lrn14$Age
gender_question <- lrn14$gender
setwd("C://Users//gondanea//OneDrive - University of Helsinki//Results//SLAM_Seq_May2022")
library(tidyverse)
library(dplyr)
library(fgsea)
library(org.Hs.eg.db)
#res<-read_excel("DEGs_GSEA.xlsx", sheet = "NVP2_Slam_Degs_Up")
enst_id <- read.table("ENST_id.txt", header = TRUE, sep = "\t")
head(enst_id)
### Converting the ENST id to gene names
library(biomaRt)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
res <- getBM(attributes = c('ensembl_transcript_id',
'ensembl_gene_id',
'external_transcript_name',
'external_gene_name'),
filters = 'ensembl_transcript_id',
values = enst_id,
mart = mart)
#res$external_gene_name <- res[match(enst_id[,1], res[,1]),2]
write.table(res,"ENST_GeneSymbol.txt", sep = "\t")
#res<-read_excel("DEGs_GSEA.xlsx", sheet = "NVP2_Slam_Degs_Up")
enst_id <- read.table("ENST_id.txt", header = TRUE, sep = "\t")
head(enst_id)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
res <- getBM(attributes = c('ensembl_transcript_id',
'ensembl_gene_id',
'external_transcript_name',
'external_gene_name'),
filters = 'ensembl_transcript_id',
values = enst_id,
mart = mart)
#res$external_gene_name <- res[match(enst_id[,1], res[,1]),2]
write.table(res,"ENST_GeneSymbol.txt", sep = "\t")
LFC_total <- LFC(NVP_OSMI_meta,name.prefix = "total",contrasts = contrasts)
library(grandR)
library(ggplot2)
library(patchwork)
LFC_total <- LFC(NVP_OSMI_meta,name.prefix = "total",contrasts = contrasts)
LFC_total <- PairwiseDESeq2(banp,name.prefix = "total",contrasts = contrasts)
LFC_new <- LFC(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
LFC_total <- LFC(NVP_OSMI_meta,name.prefix = "total",contrasts = contrasts)
LFC_total <- PairwiseDESeq2(LFC_total,name.prefix = "total",contrasts = contrasts)
LFC_new <- LFC(NVP_OSMI_meta,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
LFC_new <- PairwiseDESeq2(LFC_new,name.prefix = "new",contrasts = contrasts,mode="new", normalization = "total")
Analyses(LFC_total, description = TRUE)
Analyses(LFC_new, description = TRUE)
MAPlot(LFC_total ,analysis = "total.Control vs NVP2")|
MAPlot(LFC_new,analysis = "new.Control vs NVP2")
MAPlot(LFC_total ,analysis = "total.Control vs OSMI")|
MAPlot(LFC_new,analysis = "new.Control vs OSMI")
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2", lfc.cutoff = 1, Q = 0.05)|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2", lfc.cutoff = 1, Q = 0.05)
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2", lfc.cutoff = 1, Q<0.05)|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2", lfc.cutoff = 1, Q<0.05)
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2", lfc.cutoff = 1, Q <0.05)|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2", lfc.cutoff = 1, Q <0.05)
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2", criteria = LFC>1 & Q<0.05)|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2", criteria = LFC>1 & Q<0.05)
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2",  Q<0.05)|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2",  Q<0.05)
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2", lfc.cutoff = 1  )|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2", lfc.cutoff = 1)
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2", lfc.cutoff = 0.5  )|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2", lfc.cutoff = 0.5)
VulcanoPlot(LFC_total,analysis = "total.Control vs NVP2", lfc.cutoff = 0.5)|
VulcanoPlot(LFC_new,analysis = "new.Control vs NVP2", lfc.cutoff = 0.5)
VulcanoPlot(banp_new,analysis = "new.Control vs NVP2", lfc.cutoff = 0.5)|
VulcanoPlot(banp_new,analysis = "new.Control vs OSMI", lfc.cutoff = 0.5)
# Volcano plot comparing the total and the new from the same condition
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2",lfc.cutoff = 0.5,ylim=c(-9,50))
# Volcano plot comparing the total and the new from the same condition
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2",lfc.cutoff = 0.5)|
VulcanoPlot(LFC_new, analysis = "new.Control vs NVP2",lfc.cutoff = 0.5)
VulcanoPlot(LFC_new, analysis = "new.Control vs NVP2",lfc.cutoff = 0.5)
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2")
# Volcano plot comparing the total and the new from the same condition
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2")|
VulcanoPlot(LFC_new, analysis = "new.Control vs OSMI")
# Volcano plot comparing the total and the new from the same condition
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2")|
VulcanoPlot(LFC_new, analysis = "total.Control vs OSMI")
# Volcano plot comparing the total and the new from the same condition
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2")|
VulcanoPlot(LFC_new, analysis = "total.Control vs OSMI")
# Volcano plot comparing the total and the new from the same condition
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2")|
VulcanoPlot(LFC_total, analysis = "total.Control vs OSMI")
VulcanoPlot(LFC_total, analysis = "total.Control vs OSMI")|
VulcanoPlot(LFC_new, analysis = "new.Control vs OSMI")
VulcanoPlot(LFC_total, analysis = "total.Control vs NVP2")
VulcanoPlot(LFC_new, analysis = "new.Control vs NVP2")
genes <- GetSignificantGenes(LFC_new,analysis = "new.Control vs NVP2")
head(genes)
genes
genes <- GetSignificantGenes(LFC_new,analysis = "new.Control vs OSMI")
genes
genes <- GetSignificantGenes(LFC_new,analysis = "total.Control vs NVP2")
genes <- GetSignificantGenes(LFC_total,analysis = "total.Control vs NVP2")
head(genes)
gsea <- AnalyzeGeneSets(LFC_total,analysis = "total.Control vs NVP2",category="H")
install.packages("msigdbr")
gsea <- AnalyzeGeneSets(LFC_total,analysis = "total.Control vs NVP2",category="H")
clusterProfiler::ridgeplot(gsea)
install.packages(ridgeplot)
install.packages("ridgeplot")
library(clusterProfiler)
clusterProfiler::ridgeplot(gsea)
install.packages("ggridges")
clusterProfiler::ridgeplot(gsea)
gsea <- AnalyzeGeneSets(LFC_total,analysis = "total.Control vs NVP2",category="C7")
clusterProfiler::ridgeplot(gsea)
PlotHeatmap(LFC_total,genes=genes)
GetAnalysisTable(LFC_total,analyses = "total.Control vs NVP2",genes = genes, columns = "LFC|Q", gene.info = FALSE)
res <- GetAnalysisTable(LFC_total,analyses = "total.Control vs NVP2",genes = genes, columns = "LFC|Q", gene.info = FALSE)
head(res)
res <- GetAnalysisTable(LFC_total,analyses = "total.Control vs NVP2",genes = genes, columns = "LFC|Q", gene.info = TRUE, transform=Transform.logFC(columns=1:2))
res <- GetAnalysisTable(LFC_total,genes = genes, transform=Transform.logFC(columns=1:2))
res <- GetAnalysisTable(LFC_total,genes = genes, transform=Transform.logFC)
res <- GetAnalysisTable(LFC_total,genes = genes, transform=Transform.logFC())
res <- GetAnalysisTable(LFC_total,genes = genes, transform="logFC")
setwd("Z:/Downloads/GRAND_SLAM/GRAND_SLAM_full")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "Conversions", minval = 2)
Title(NVP_OSMI_meta)
nrow(NVP_OSMI_meta)
ncol(NVP_OSMI_meta)
## check the GrandR object
print(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "ntr", minval = 2)
nrow(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "ntr")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "new.counts")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "new")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = new.counts)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "new.counts")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "new")
setwd("Z:/Downloads/GRAND_SLAM/GRAND_SLAM_full")
library(grandR)
library(ggplot2)
library(patchwork)
## preparing metadata
metadata = data.frame(Name=c(
"Control_1", "Control_2", "NVP2_1", "NVP2_2", "OSMI_1", "OSMI_2"
),Condition=rep(c("Control","NVP2", "OSMI"),each=2))
# reading the Grand-SLAM output and the corresponding metadata
NVP_OSMI_meta <- ReadGRAND("GRAND_SLAM_311022.tsv",design=metadata)
## check the GrandR object
print(NVP_OSMI_meta)
Title(NVP_OSMI_meta)
nrow(NVP_OSMI_meta)
ncol(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "new")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta,  mode.slot = "ntr")
nrow(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta)
ncol(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta)
#Gene metadata
head(GeneInfo(NVP_OSMI_meta), 10)
# retrieve the first 20 genes
head(Genes(NVP_OSMI_meta), n=20)
# reading the Grand-SLAM output and the corresponding metadata
NVP_OSMI_meta <- ReadGRAND("GRAND_SLAM_311022.tsv",design=metadata)
## check the GrandR object
print(NVP_OSMI_meta)
Title(NVP_OSMI_meta)
nrow(NVP_OSMI_meta)
ncol(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta)
nrow(NVP_OSMI_meta)
#Gene metadata
head(GeneInfo(NVP_OSMI_meta), 10)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta, mode.slot = "new.counts")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta, mode.slot = "new.count")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta, mode.slot = "new.ntr")
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta, mode.slot = "new.count")
# reading the Grand-SLAM output and the corresponding metadata
NVP_OSMI_meta <- ReadGRAND("GRAND_SLAM_311022.tsv",design=metadata)
## check the GrandR object
print(NVP_OSMI_meta)
Title(NVP_OSMI_meta)
nrow(NVP_OSMI_meta)
ncol(NVP_OSMI_meta)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta, mode.slot = "new.count")
nrow(NVP_OSMI_meta)
#Gene metadata
head(GeneInfo(NVP_OSMI_meta), 10)
# retrieve the first 20 genes
head(Genes(NVP_OSMI_meta), n=20)
table(GeneInfo(NVP_OSMI_meta,"Type"))
#Data is organized in an grandR object in so-called slots:
Slots(NVP_OSMI_meta)
# reading the Grand-SLAM output and the corresponding metadata
NVP_OSMI_meta <- ReadGRAND("GRAND_SLAM_311022.tsv",design=metadata)
#Filter genes.  By default genes are retained if they have 100 read counts in at least half of the samples (or cells).
NVP_OSMI_meta <- FilterGenes(NVP_OSMI_meta, mode.slot = "new.alpha")
nrow(NVP_OSMI_meta)
# reading the Grand-SLAM output and the corresponding metadata
NVP_OSMI_meta <- ReadGRAND("GRAND_SLAM_311022.tsv",design=metadata)
mock <- subset(NVP_OSMI_meta,columns = Condition=="NVP2")
mock
mock <- FilterGenes(mock, mode.slot = "new.ntr")
mock <- FilterGenes(mock, mode.slot = "new.alpha")
nrow(NVP_OSMI_meta)
nrow(mock)
mock <- subset(NVP_OSMI_meta,columns = Condition=="NVP2")
mock
mock <- FilterGenes(mock, mode.slot = "new.count")
nrow(mock)
#Gene metadata
head(GeneInfo(NVP_OSMI_meta), 10)
head(GeneInfo(mock), 10)
mock <- FilterGenes(mock)
mock <- subset(NVP_OSMI_meta,columns = Condition=="NVP2")
mock
mock <- FilterGenes(mock)
nrow(mock)
#Gene metadata
head(GeneInfo(NVP_OSMI_meta), 10)
head(GeneInfo(mock), 10)
# retrieve the first 20 genes
head(Genes(NVP_OSMI_meta), n=20)
table(GeneInfo(mock,"Type"))
t=read.delim(paste0(prefix,".binomEstimated.tsv"))
library(ggplot2)
library(reshape2)
t=read.delim(paste0(prefix,".binomEstimated.tsv"))
prefix <- 'GRAND_SLAM_311022'
t=read.delim(paste0(prefix,".binomEstimated.tsv"))
t$Condition=factor(as.character(t$Condition),levels=as.character(t$Condition))
r=melt(t[,c(1:3,7)])
head(r)
head(prefix)
head(t)
if (file.exists(paste0(prefix,".binomOverlapEstimated.tsv"))) {
t=read.delim(paste0(prefix,".binomOverlapEstimated.tsv"))
t$Condition=factor(as.character(t$Condition),levels=as.character(t$Condition))
r=melt(t[,c(1:3,7)])
png(paste(prefix,".binomOverlapRates.png",sep=''),width=800,height=800)
print(ggplot(r,aes(Condition,value,col=variable,shape=Status))+geom_point(size=2)+scale_color_brewer("",palette="Dark2")+theme_bw()+theme(text=element_text(size=24),axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+ylab("Rate"))
dev.off()
png(paste(prefix,".binomOverlapNewProportion.png",sep=''),width=800,height=800)
print(ggplot(t,aes(Condition,p_new,ymin=p_new_lower,ymax=p_new_upper,col=Status))+geom_point(size=1)+geom_errorbar(width=0.2)+ylim(0,1)+ylab("Proportion of new RNA")+theme_bw()+theme(text=element_text(size=24),axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)))
dev.off()
}
